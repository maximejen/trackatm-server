<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Cleaner;
use AppBundle\Entity\OperationHistory;

/**
 * OperationHistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OperationHistoryRepository extends \Doctrine\ORM\EntityRepository
{
    public function findOperationHistoriesBetweenTwoDates($date1, $date2)
    {
        return $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder('ohre')
            ->where('ohre.initialDate BETWEEN :date1 AND :date2')
            ->setParameter('date1', $date1->format("Y-m-d 00:00:00"))
            ->setParameter('date2', $date2->format("Y-m-d 23:59:59"))
            ->getQuery()
            ->getResult();
    }
    public function findOperationHistoriesBetweenTwoBeginningDates($date1, $date2)
    {
        return $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder('ohre')
            ->where('ohre.beginningDate BETWEEN :date1 AND :date2')
            ->setParameter('date1', $date1->format("Y-m-d 00:00:00"))
            ->setParameter('date2', $date2->format("Y-m-d 23:59:59"))
            ->getQuery()
            ->getResult();
    }

    public function findOperationHistoriesByCustomerName($customerName)
    {
        return $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder('ohre')
            ->where('ohre.customer LIKE :customer')
            ->setParameter('customer', $customerName)
            ->getQuery()
            ->getResult();
    }

    public function findOperationHistoriesByCustomerNameAndBetweenTwoDates($customerName, $date1, $date2)
    {
        return $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder('ohre')
            ->where('ohre.customer LIKE :customer')
            ->andWhere('ohre.initialDate BETWEEN :date1 AND :date2')
            ->setParameter('date1', $date1->format("Y-m-d 00:00:00"))
            ->setParameter('date2', $date2->format("Y-m-d 23:59:59"))
            ->setParameter('customer', $customerName)
            ->getQuery()
            ->getResult();
    }

    public function findOperationHistoriesByCustomerNameAndTemplateNameAndBetweenTwoBeginningDates($customerName, $templateName, $date1, $date2)
    {
        return $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder('ohre')
            ->where('ohre.customer LIKE :customer')
            ->andWhere('ohre.name LIKE :template')
            ->andWhere('ohre.beginningDate BETWEEN :date1 AND :date2')
            ->setParameter('date1', $date1->format("Y-m-d 00:00:00"))
            ->setParameter('date2', $date2->format("Y-m-d 23:59:59"))
            ->setParameter('customer', $customerName)
            ->setParameter('template', $templateName)
            ->getQuery()
            ->getResult();
    }

    public function findOperationHistoriesByCustomerNameAndBetweenTwoBeginningDates($customerName, $date1, $date2)
    {
        return $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder('ohre')
            ->where('ohre.customer LIKE :customer')
            ->andWhere('ohre.beginningDate BETWEEN :date1 AND :date2')
            ->setParameter('date1', $date1->format("Y-m-d 00:00:00"))
            ->setParameter('date2', $date2->format("Y-m-d 23:59:59"))
            ->setParameter('customer', $customerName)
            ->getQuery()
            ->getResult();
    }

    public function findOperationHistoriesByTemplateNameAndBetweenTwoBeginningDates($templateName, $date1, $date2)
    {
        return $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder('ohre')
            ->where('ohre.name LIKE :template')
            ->andWhere('ohre.beginningDate BETWEEN :date1 AND :date2')
            ->setParameter('date1', $date1->format("Y-m-d 00:00:00"))
            ->setParameter('date2', $date2->format("Y-m-d 23:59:59"))
            ->setParameter('template', $templateName)
            ->getQuery()
            ->getResult();
    }

    public function findOperationHistoriesByCleanerAndBetweenTwoDates(Cleaner $cleaner, $date1, $date2)
    {
        return $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder('ohre')
            ->where('cleaner.id = :cleaner')
            ->andWhere('ohre.initialDate BETWEEN :date1 AND :date2')
            ->join('ohre.cleaner', 'cleaner')
            ->setParameter('date1', $date1->format("Y-m-d 00:00:00"))
            ->setParameter('date2', $date2->format("Y-m-d 23:59:59"))
            ->setParameter('cleaner', $cleaner->getId())
            ->getQuery()
            ->getResult();
    }

    public function findOperationHistoriesByCleanerThisMonth(Cleaner $cleaner, \DateTime $date1, \DateTime $date2)
    {
        $dateTmp = new \DateTime($date1->format("Y-m-d"));
        $dateTmp->modify("-3 weeks");

        $ohs = $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder("oh")
            ->where('cleaner.id = :cleanerId')
            ->andWhere("DATE_DIFF(oh.beginningDate, :date1) >= 0")
            ->andWhere("DATE_DIFF(oh.beginningDate, :date2) <= 0")
            ->join("oh.cleaner", "cleaner")
            ->setParameter("date1", $dateTmp->format("Y-m-d"))
            ->setParameter("date2", $date2->format("Y-m-d"))
            ->setParameter('cleanerId', $cleaner->getId())
            ->getQuery()
            ->getResult()
        ;
        $result = [];
        /** @var OperationHistory $oh */
        foreach ($ohs as $oh) {
            $index = $oh->getPlace() . $oh->getCleaner()->__toString() . $oh->getName();
            if (!array_key_exists($index, $result)) {
                $result[$index] = [];
            }
            $result[$index][] = $oh;
        }
        return $result;
    }

    public function findOperationHistoriesByCleanerASpecificWeek(Cleaner $cleaner, $firstDay, $secondDay)
    {
        $ohs = $this->_em->getRepository("AppBundle:OperationHistory")->createQueryBuilder("oh")
            ->where('cleaner.id = :cleanerId')
            ->andWhere("DATE_DIFF(oh.beginningDate, :date1) >= 0")
            ->andWhere("DATE_DIFF(oh.beginningDate, :date2) <= 0")
            ->join("oh.cleaner", "cleaner")
            ->setParameter("date1", $firstDay->format("Y-m-d"))
            ->setParameter("date2", $secondDay->format("Y-m-d"))
            ->setParameter('cleanerId', $cleaner->getId())
            ->getQuery()
            ->getResult()
        ;
        $result = [];
        /** @var OperationHistory $oh */
        foreach ($ohs as $oh) {
            $index = $oh->getPlace() . $oh->getCleaner()->__toString();
            if (!array_key_exists($index, $result)) {
                $result[$index] = [];
            }
            $result[$index][] = $oh;
        }
        return $result;
    }
}
